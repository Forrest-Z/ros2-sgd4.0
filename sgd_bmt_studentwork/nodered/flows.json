[
  {
    "id": "1c794346e49938b7",
    "type": "tab",
    "label": "Test Flow",
    "disabled": false,
    "info": ""
  },
  {
    "id": "f6f2187d.f17ca8",
    "type": "tab",
    "label": "Production Flow",
    "disabled": false,
    "info": ""
  },
  {
    "id": "2f32ea2df6fa4c87",
    "type": "mqtt-broker",
    "name": "dummy broker",
    "broker": "host.docker.internal",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "d2b91bd6766c012b",
    "type": "mqtt-broker",
    "name": "mk5 broker",
    "broker": "10.23.24.3",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "c2a9988dd93fedb6",
    "type": "comment",
    "z": "1c794346e49938b7",
    "name": "If you click on the \"create valid JSON\" button here, TEST\\n data will be generated for the visualizer. This will overwrite any test data you have processed previously.\\n However, please note that the raw data will remain in its original stored format.",
    "info": "",
    "x": 390,
    "y": 500,
    "wires": []
  },
  {
    "id": "ab0f1b25a00a72fa",
    "type": "mqtt in",
    "z": "1c794346e49938b7",
    "name": "gps",
    "topic": "v2x/rx/obu_gnss",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "2f32ea2df6fa4c87",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 40,
    "wires": [["6ffcb9d79a972835"]]
  },
  {
    "id": "6ffcb9d79a972835",
    "type": "json",
    "z": "1c794346e49938b7",
    "name": "",
    "property": "payload.latitude",
    "action": "",
    "pretty": true,
    "x": 230,
    "y": 40,
    "wires": [["95edf4f2f05b5fbd", "776da5801c6cbf5a"]]
  },
  {
    "id": "95edf4f2f05b5fbd",
    "type": "debug",
    "z": "1c794346e49938b7",
    "name": "debug raw gps",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 40,
    "wires": []
  },
  {
    "id": "fbb7fafb55b2e495",
    "type": "mqtt in",
    "z": "1c794346e49938b7",
    "name": "spat",
    "topic": "v2x-uca/output/json/spat",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "2f32ea2df6fa4c87",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 160,
    "wires": [["6aac91db5261fc82"]]
  },
  {
    "id": "6aac91db5261fc82",
    "type": "json",
    "z": "1c794346e49938b7",
    "name": "",
    "property": "payload.latitude",
    "action": "",
    "pretty": true,
    "x": 230,
    "y": 160,
    "wires": [["ef99430a8456c5e8", "63d1d551a94cc65b"]]
  },
  {
    "id": "ef99430a8456c5e8",
    "type": "debug",
    "z": "1c794346e49938b7",
    "name": "debug raw spat",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 160,
    "wires": []
  },
  {
    "id": "d9dca32a35ac43a1",
    "type": "json",
    "z": "1c794346e49938b7",
    "name": "",
    "property": "payload.latitude",
    "action": "",
    "pretty": true,
    "x": 230,
    "y": 280,
    "wires": [["3fbbdffa2bac39d4", "45e168cab67a7727"]]
  },
  {
    "id": "3fbbdffa2bac39d4",
    "type": "debug",
    "z": "1c794346e49938b7",
    "name": "debug raw cam",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 280,
    "wires": []
  },
  {
    "id": "f7e2e74ae51a2059",
    "type": "mqtt in",
    "z": "1c794346e49938b7",
    "name": "cam",
    "topic": "v2x-uca/output/json/cam",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "2f32ea2df6fa4c87",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 280,
    "wires": [["d9dca32a35ac43a1"]]
  },
  {
    "id": "1f81e78a0463b1c7",
    "type": "file",
    "z": "1c794346e49938b7",
    "name": "log raw gps",
    "filename": "/usr/src/node-red/logs/raw/testgps.json",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 690,
    "y": 80,
    "wires": [[]]
  },
  {
    "id": "01cad173b085d69a",
    "type": "file",
    "z": "1c794346e49938b7",
    "name": "log raw spat",
    "filename": "/usr/src/node-red/logs/raw/testspat.json",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 690,
    "y": 200,
    "wires": [[]]
  },
  {
    "id": "42bc9348e2d8b626",
    "type": "file",
    "z": "1c794346e49938b7",
    "name": "log raw cam",
    "filename": "/usr/src/node-red/logs/raw/testcam.json",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 690,
    "y": 320,
    "wires": [[]]
  },
  {
    "id": "08378e1f2bf9675c",
    "type": "json",
    "z": "1c794346e49938b7",
    "name": "",
    "property": "payload.latitude",
    "action": "",
    "pretty": true,
    "x": 230,
    "y": 380,
    "wires": [["eaf513d1728e63af", "678e0505893e1ee0"]]
  },
  {
    "id": "eaf513d1728e63af",
    "type": "debug",
    "z": "1c794346e49938b7",
    "name": "debug raw map",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 380,
    "wires": []
  },
  {
    "id": "c0d6bbf6b25c7348",
    "type": "mqtt in",
    "z": "1c794346e49938b7",
    "name": "map",
    "topic": "v2x-uca/output/json/map",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "2f32ea2df6fa4c87",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 380,
    "wires": [["08378e1f2bf9675c"]]
  },
  {
    "id": "b266b77f3c38833a",
    "type": "file",
    "z": "1c794346e49938b7",
    "name": "log raw map",
    "filename": "/usr/src/node-red/logs/raw/testmap.json",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 690,
    "y": 420,
    "wires": [[]]
  },
  {
    "id": "776da5801c6cbf5a",
    "type": "function",
    "z": "1c794346e49938b7",
    "name": "create file if needed",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/raw/testgps.json';\n\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 80,
    "wires": [["1f81e78a0463b1c7"]]
  },
  {
    "id": "63d1d551a94cc65b",
    "type": "function",
    "z": "1c794346e49938b7",
    "name": "create file if needed",
    "func": "const fs = global.get('fs');\n\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/raw/testspat.json';\n\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n}\nreturn null;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 200,
    "wires": [["01cad173b085d69a"]]
  },
  {
    "id": "45e168cab67a7727",
    "type": "function",
    "z": "1c794346e49938b7",
    "name": "create file if needed",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/raw/testcam.json';\n\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 320,
    "wires": [["42bc9348e2d8b626"]]
  },
  {
    "id": "678e0505893e1ee0",
    "type": "function",
    "z": "1c794346e49938b7",
    "name": "create file if needed",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/raw/testmap.json';\n\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 420,
    "wires": [["b266b77f3c38833a"]]
  },
  {
    "id": "24ed795c44f6034b",
    "type": "file in",
    "z": "1c794346e49938b7",
    "name": "read raw gps",
    "filename": "/usr/src/node-red/logs/raw/testgps.json",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "utf8",
    "allProps": false,
    "x": 370,
    "y": 640,
    "wires": [["cb9f12e8329e4dfb"]]
  },
  {
    "id": "cb9f12e8329e4dfb",
    "type": "function",
    "z": "1c794346e49938b7",
    "name": "proccess",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/processed/gps.json';\nlet fileCreated = false;\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n    fileCreated = true;\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n    fileCreated = true;\n}\n\nif (fileCreated) {\n    // node.log(msg.payload)\n    const regex = /}\\s*{\"obu_timestamp_sec\":/g;\n    const valueToReplace = '},{\"obu_timestamp_sec\":';\n    // const value = \"{'obj':[\" + msg.payload.replace(regex, valueToReplace) + \"]}\";\n    msg.payload = JSON.parse('{\"result\":[' + msg.payload.replace(regex, valueToReplace) +']}').result;\n    return msg;\n}\n\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 540,
    "y": 640,
    "wires": [["26d2c0d66a20ef71"]]
  },
  {
    "id": "26d2c0d66a20ef71",
    "type": "file",
    "z": "1c794346e49938b7",
    "name": "write gps",
    "filename": "/usr/src/node-red/logs/processed/gps.json",
    "filenameType": "str",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "utf8",
    "x": 700,
    "y": 640,
    "wires": [[]]
  },
  {
    "id": "ee46f1dc34c2498b",
    "type": "file in",
    "z": "1c794346e49938b7",
    "name": "read raw map",
    "filename": "/usr/src/node-red/logs/raw/testmap.json",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "utf8",
    "allProps": false,
    "x": 380,
    "y": 740,
    "wires": [["3fc4c6af4b8facdf"]]
  },
  {
    "id": "3fc4c6af4b8facdf",
    "type": "function",
    "z": "1c794346e49938b7",
    "name": "proccess",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/processed/map.json';\nlet fileCreated = false;\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n    fileCreated = true;\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n    fileCreated = true;\n}\n\nif (fileCreated) {\n    const regex = /}\\s*{\"intersectionId\":/g;\n    const valueToReplace = '},{\"intersectionId\":';\n    msg.payload = JSON.parse('{\"result\":[' + msg.payload.replace(regex, valueToReplace) +']}').result;\n    return msg;\n}\n\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 540,
    "y": 740,
    "wires": [["0fd09993edcf11b8"]]
  },
  {
    "id": "0fd09993edcf11b8",
    "type": "file",
    "z": "1c794346e49938b7",
    "name": "write map",
    "filename": "/usr/src/node-red/logs/processed/map.json",
    "filenameType": "str",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "utf8",
    "x": 700,
    "y": 740,
    "wires": [[]]
  },
  {
    "id": "0cf47faf0f458056",
    "type": "inject",
    "z": "1c794346e49938b7",
    "name": "create valid json",
    "props": [],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 140,
    "y": 600,
    "wires": [["24ed795c44f6034b", "ee46f1dc34c2498b"]],
    "info": "It generates a valid map.json file for rendering it markes inside the google maps"
  },
  {
    "id": "0439ace36192ef00",
    "type": "mqtt in",
    "z": "f6f2187d.f17ca8",
    "name": "gps",
    "topic": "v2x/rx/obu_gnss",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "d2b91bd6766c012b",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 40,
    "wires": [["a98f4ca172ed53dd"]]
  },
  {
    "id": "a98f4ca172ed53dd",
    "type": "json",
    "z": "f6f2187d.f17ca8",
    "name": "",
    "property": "payload.latitude",
    "action": "",
    "pretty": true,
    "x": 230,
    "y": 40,
    "wires": [["528ee40438fd4b6b", "cfb2632afbcecfa4"]]
  },
  {
    "id": "528ee40438fd4b6b",
    "type": "debug",
    "z": "f6f2187d.f17ca8",
    "name": "debug raw gps",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 40,
    "wires": []
  },
  {
    "id": "378e13b8ef754686",
    "type": "mqtt in",
    "z": "f6f2187d.f17ca8",
    "name": "spat",
    "topic": "v2x-uca/output/json/spat",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "d2b91bd6766c012b",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 160,
    "wires": [["03e82d569d25232c"]]
  },
  {
    "id": "03e82d569d25232c",
    "type": "json",
    "z": "f6f2187d.f17ca8",
    "name": "",
    "property": "payload.latitude",
    "action": "",
    "pretty": true,
    "x": 230,
    "y": 160,
    "wires": [["8331f1bdea66bb8a", "cc039f319537ee8a"]]
  },
  {
    "id": "8331f1bdea66bb8a",
    "type": "debug",
    "z": "f6f2187d.f17ca8",
    "name": "debug raw spat",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 160,
    "wires": []
  },
  {
    "id": "281cc5fcf63a727b",
    "type": "json",
    "z": "f6f2187d.f17ca8",
    "name": "",
    "property": "payload.latitude",
    "action": "",
    "pretty": true,
    "x": 230,
    "y": 280,
    "wires": [["2977346deb596f74", "086d0a4085941369"]]
  },
  {
    "id": "2977346deb596f74",
    "type": "debug",
    "z": "f6f2187d.f17ca8",
    "name": "debug raw cam",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 280,
    "wires": []
  },
  {
    "id": "e18ea48fc3e1ad01",
    "type": "mqtt in",
    "z": "f6f2187d.f17ca8",
    "name": "cam",
    "topic": "v2x-uca/output/json/cam",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "d2b91bd6766c012b",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 280,
    "wires": [["281cc5fcf63a727b"]]
  },
  {
    "id": "822d21252075a9cf",
    "type": "file",
    "z": "f6f2187d.f17ca8",
    "name": "log raw gps",
    "filename": "/usr/src/node-red/logs/raw/gps.json",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 690,
    "y": 80,
    "wires": [[]]
  },
  {
    "id": "61f2b611d7074f8e",
    "type": "file",
    "z": "f6f2187d.f17ca8",
    "name": "log raw spat",
    "filename": "/usr/src/node-red/logs/raw/spat.json",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 690,
    "y": 200,
    "wires": [[]]
  },
  {
    "id": "54f6cd9beff43188",
    "type": "file",
    "z": "f6f2187d.f17ca8",
    "name": "log raw cam",
    "filename": "/usr/src/node-red/logs/raw/cam.json",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 690,
    "y": 320,
    "wires": [[]]
  },
  {
    "id": "1487445f19a7ce81",
    "type": "json",
    "z": "f6f2187d.f17ca8",
    "name": "",
    "property": "payload.latitude",
    "action": "",
    "pretty": true,
    "x": 230,
    "y": 380,
    "wires": [["0cca2e70980ead32", "ba9e546942e85af4"]]
  },
  {
    "id": "0cca2e70980ead32",
    "type": "debug",
    "z": "f6f2187d.f17ca8",
    "name": "debug raw map",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 380,
    "wires": []
  },
  {
    "id": "562e2af9f637609a",
    "type": "mqtt in",
    "z": "f6f2187d.f17ca8",
    "name": "map",
    "topic": "v2x-uca/output/json/map",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "d2b91bd6766c012b",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 380,
    "wires": [["1487445f19a7ce81"]]
  },
  {
    "id": "b03e372471487a74",
    "type": "file",
    "z": "f6f2187d.f17ca8",
    "name": "log raw map",
    "filename": "/usr/src/node-red/logs/raw/map.json",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 690,
    "y": 420,
    "wires": [[]]
  },
  {
    "id": "cfb2632afbcecfa4",
    "type": "function",
    "z": "f6f2187d.f17ca8",
    "name": "create file if needed",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/raw/gps.json';\n\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 80,
    "wires": [["822d21252075a9cf"]]
  },
  {
    "id": "cc039f319537ee8a",
    "type": "function",
    "z": "f6f2187d.f17ca8",
    "name": "create file if needed",
    "func": "const fs = global.get('fs');\n\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/raw/spat.json';\n\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n}\nreturn null;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 200,
    "wires": [["61f2b611d7074f8e"]]
  },
  {
    "id": "086d0a4085941369",
    "type": "function",
    "z": "f6f2187d.f17ca8",
    "name": "create file if needed",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/raw/cam.json';\n\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 320,
    "wires": [["54f6cd9beff43188"]]
  },
  {
    "id": "ba9e546942e85af4",
    "type": "function",
    "z": "f6f2187d.f17ca8",
    "name": "create file if needed",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/raw/map.json';\n\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 420,
    "wires": [["b03e372471487a74"]]
  },
  {
    "id": "4ef5efc0.b56a64",
    "type": "file in",
    "z": "f6f2187d.f17ca8",
    "name": "read raw gps",
    "filename": "/usr/src/node-red/logs/raw/gps.json",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "utf8",
    "allProps": false,
    "x": 370,
    "y": 620,
    "wires": [["c2fd3b47.87fe68"]]
  },
  {
    "id": "c2fd3b47.87fe68",
    "type": "function",
    "z": "f6f2187d.f17ca8",
    "name": "proccess",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/processed/gps.json';\nlet fileCreated = false;\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n    fileCreated = true;\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n    fileCreated = true;\n}\n\nif (fileCreated) {\n    // node.log(msg.payload)\n    const regex = /}\\s*{\"obu_timestamp_sec\":/g;\n    const valueToReplace = '},{\"obu_timestamp_sec\":';\n    // const value = \"{'obj':[\" + msg.payload.replace(regex, valueToReplace) + \"]}\";\n    msg.payload = JSON.parse('{\"result\":[' + msg.payload.replace(regex, valueToReplace) +']}').result;\n    return msg;\n}\n\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 540,
    "y": 620,
    "wires": [["b2e85f03.eedc78"]]
  },
  {
    "id": "b2e85f03.eedc78",
    "type": "file",
    "z": "f6f2187d.f17ca8",
    "name": "write gps",
    "filename": "/usr/src/node-red/logs/processed/gps.json",
    "filenameType": "str",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "utf8",
    "x": 700,
    "y": 620,
    "wires": [[]]
  },
  {
    "id": "6846a2fcdf9d74b8",
    "type": "file in",
    "z": "f6f2187d.f17ca8",
    "name": "read raw map",
    "filename": "/usr/src/node-red/logs/raw/map.json",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "utf8",
    "allProps": false,
    "x": 380,
    "y": 720,
    "wires": [["c2fbed3cde2ff88e"]]
  },
  {
    "id": "c2fbed3cde2ff88e",
    "type": "function",
    "z": "f6f2187d.f17ca8",
    "name": "proccess",
    "func": "const fs = global.get('fs');\n\n// Specify the file path\nconst filePath = '/usr/src/node-red/logs/processed/map.json';\nlet fileCreated = false;\n// Check if the file exists\nif (!fs.existsSync(filePath)) {\n    // Create the file\n    fs.writeFileSync(filePath, '');\n    node.status({ fill: \"green\", shape: \"dot\", text: \"File created\" });\n    fileCreated = true;\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"File already exists\" });\n    fileCreated = true;\n}\n\nif (fileCreated) {\n    const regex = /}\\s*{\"intersectionId\":/g;\n    const valueToReplace = '},{\"intersectionId\":';\n    msg.payload = JSON.parse('{\"result\":[' + msg.payload.replace(regex, valueToReplace) +']}').result;\n    return msg;\n}\n\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 540,
    "y": 720,
    "wires": [["40e87f3005572b18"]]
  },
  {
    "id": "40e87f3005572b18",
    "type": "file",
    "z": "f6f2187d.f17ca8",
    "name": "write map",
    "filename": "/usr/src/node-red/logs/processed/map.json",
    "filenameType": "str",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "utf8",
    "x": 700,
    "y": 720,
    "wires": [[]]
  },
  {
    "id": "9dad24fb7640ae9f",
    "type": "inject",
    "z": "f6f2187d.f17ca8",
    "name": "create valid json",
    "props": [],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 140,
    "y": 580,
    "wires": [["4ef5efc0.b56a64", "6846a2fcdf9d74b8"]],
    "info": "It generates a valid map.json file for rendering it markes inside the google maps"
  },
  {
    "id": "8bb2207ce0908841",
    "type": "comment",
    "z": "f6f2187d.f17ca8",
    "name": "If you click on the \"create valid JSON\" button here, PRODUCTION\\n data will be generated for the visualizer. This will overwrite any test data you have processed previously.\\n However, please note that the raw data will remain in its original stored format.",
    "info": "",
    "x": 390,
    "y": 500,
    "wires": []
  }
]
